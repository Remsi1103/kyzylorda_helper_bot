# main.py
import telebot
from telebot import types
import sqlite3
import os
from flask import Flask
from threading import Thread

# üîë –¢–æ–∫–µ–Ω –∏ ID
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)
ADMIN_ID = 6864791335  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID
CHANNEL_ID = "@kyzylorda_helper_channel"

# üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("ads.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS ads
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   user_id INTEGER,
                   category TEXT,
                   text TEXT,
                   is_paid INTEGER)''')
conn.commit()

# üåê Flask
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

Thread(target=run_flask).start()

# üåç –í—ã–±–æ—Ä —è–∑—ã–∫–∞
user_language = {}

def get_text(user_id, ru, kz):
    return ru if user_language.get(user_id) == 'ru' else kz

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫"), types.KeyboardButton("“ö–∞–∑–∞“õ—à–∞ üá∞üáø"))
    bot.send_message(message.chat.id, "üëã –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["–†—É—Å—Å–∫–∏–π üá∑üá∫", "“ö–∞–∑–∞“õ—à–∞ üá∞üáø"])
def set_language(message):
    user_language[message.from_user.id] = 'ru' if message.text == "–†—É—Å—Å–∫–∏–π üá∑üá∫" else 'kz'
    show_main_menu(message)

def show_main_menu(message):
    lang = user_language.get(message.from_user.id, 'ru')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏–∏" if lang == 'ru' else "üì¢ –ñ“±–º—ã—Å")
    markup.add("üè† –ê—Ä–µ–Ω–¥–∞" if lang == 'ru' else "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É")
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" if lang == 'ru' else "‚ûï –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É")
    markup.add("üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" if lang == 'ru' else "üí∞ –ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É")
    markup.add("üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" if lang == 'ru' else "üìã –ú–µ–Ω—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã–º")
    markup.add("‚ÑπÔ∏è –ü–æ–º–æ—â—å" if lang == 'ru' else "‚ÑπÔ∏è –ö”©–º–µ–∫")
    if message.from_user.id == ADMIN_ID:
        markup.add("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    welcome = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kyzylorda Helper!" if lang == 'ru' else "üëã Kyzylorda Helper-–≥–µ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!"
    bot.send_message(message.chat.id, welcome, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["üì¢ –í–∞–∫–∞–Ω—Å–∏–∏", "üì¢ –ñ“±–º—ã—Å"])
def show_jobs(message):
    cursor.execute("SELECT text FROM ads WHERE category = 'vacancy'")
    ads = cursor.fetchall()
    if not ads:
        bot.send_message(message.chat.id, get_text(message.from_user.id, "–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.", "–ñ“±–º—ã—Å —Ç–∞–±—ã–ª–º–∞–¥—ã."))
    else:
        for ad in ads:
            bot.send_message(message.chat.id, ad[0])

@bot.message_handler(func=lambda m: m.text in ["üè† –ê—Ä–µ–Ω–¥–∞", "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É"])
def show_rent(message):
    cursor.execute("SELECT text FROM ads WHERE category = 'rent'")
    ads = cursor.fetchall()
    if not ads:
        bot.send_message(message.chat.id, get_text(message.from_user.id, "–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∞—Ä–µ–Ω–¥–µ.", "–ñ–∞–ª“ì–∞ –±–µ—Ä—É —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã –∂–æ“õ."))
    else:
        for ad in ads:
            bot.send_message(message.chat.id, ad[0])

@bot.message_handler(func=lambda m: m.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "‚ûï –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É"])
def ask_category(message):
    lang = user_language.get(message.from_user.id, 'ru')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏–∏" if lang == 'ru' else "üì¢ –ñ“±–º—ã—Å")
    markup.add("üè† –ê—Ä–µ–Ω–¥–∞" if lang == 'ru' else "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É")
    bot.send_message(message.chat.id, get_text(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", "–°–∞–Ω–∞—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:"), reply_markup=markup)
    bot.register_next_step_handler(message, get_ad_text)

def get_ad_text(message):
    category = 'vacancy' if "–í–∞–∫–∞–Ω—Å–∏–∏" in message.text or "–ñ“±–º—ã—Å" in message.text else 'rent'
    bot.send_message(message.chat.id, get_text(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É –º”ô—Ç—ñ–Ω—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:"))
    bot.register_next_step_handler(message, save_ad, category)

def save_ad(message, category):
    cursor.execute("INSERT INTO ads (user_id, category, text, is_paid) VALUES (?, ?, ?, ?)",
                   (message.from_user.id, category, message.text, 0))
    conn.commit()
    bot.send_message(message.chat.id, get_text(message.from_user.id, "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", "‚úÖ –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É —Å–∞“õ—Ç–∞–ª–¥—ã."))

@bot.message_handler(func=lambda m: m.text in ["üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üí∞ –ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É"])
def paid_ad(message):
    text = get_text(message.from_user.id,
        "üí∞ –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1000‚Ç∏ –Ω–∞ Kaspi:\nüì± +7 777 777 7777\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞.",
        "üí∞ –ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “Ø—à—ñ–Ω Kaspi-–≥–µ 1000‚Ç∏ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:\nüì± +7 777 777 7777\n–¢”©–ª–µ–º –∂–∞—Å–∞“ì–∞–Ω —Å–æ“£ —Å–∫—Ä–∏–Ω—à–æ—Ç –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.")
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text in ["üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "üìã –ú–µ–Ω—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã–º"])
def my_ads(message):
    cursor.execute("SELECT text FROM ads WHERE user_id = ?", (message.from_user.id,))
    ads = cursor.fetchall()
    if not ads:
        bot.send_message(message.chat.id, get_text(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", "–°—ñ–∑–¥–µ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É –∂–æ“õ."))
    else:
        for ad in ads:
            bot.send_message(message.chat.id, ad[0])

@bot.message_handler(func=lambda m: m.text in ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚ÑπÔ∏è –ö”©–º–µ–∫"])
def help_message(message):
    text = get_text(message.from_user.id,
        "‚ÑπÔ∏è –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.\n–ü–ª–∞—Ç–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ.",
        "‚ÑπÔ∏è –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É “Ø—à—ñ–Ω —Å–∞–Ω–∞—Ç—Ç—ã —Ç–∞“£–¥–∞–ø, –º”ô—Ç—ñ–Ω–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.\n–ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä –∞—Ä–Ω–∞–¥–∞ –∂–∞—Ä–∏—è–ª–∞–Ω–∞–¥—ã.")
    bot.send_message(message.chat.id, text)

# üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(func=lambda m: m.text == "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìã –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="admin_all_ads"))
    markup.add(types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="admin_delete"))
    markup.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh"))
    bot.send_message(message.chat.id, "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_panel(call):
    if call.from_user.id != ADMIN_ID:
        return

    if call.data == "admin_all_ads":
        cursor.execute("SELECT id, user_id, text, is_paid FROM ads")
        ads = cursor.fetchall()
        if not ads:
            bot.send_message(call.message.chat.id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")
        else:
            for ad in ads:
                paid = "üí∞" if ad[3] else ""
                msg = f"üÜî {ad[0]} | üë§ {ad[1]} {paid}\n{ad[2]}"
                bot.send_message(call.message.chat.id, msg[:4096])

    elif call.data == "admin_delete":
        bot.send_message(call.message.chat.id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É: `/delete ID`", parse_mode="Markdown")

    elif call.data == "admin_refresh":
        admin_panel(call.message)

@bot.message_handler(commands=['delete'])
def delete_ad(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        ad_id = int(message.text.split()[1])
        cursor.execute("DELETE FROM ads WHERE id = ?", (ad_id,))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_id} —É–¥–∞–ª–µ–Ω–æ.")
    except:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete [ID]")

# üü¢ –ó–∞–ø—É—Å–∫
bot.polling(non_stop=True)