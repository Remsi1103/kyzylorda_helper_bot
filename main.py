# main.py
import telebot
from telebot import types
import sqlite3
import os
from flask import Flask
from threading import Thread

TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

# –ê–¥–º–∏–Ω ID
ADMIN_ID = 6864791335  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
CHANNEL_ID = "@kyzylorda_helper_channel"
KASPI_CARD = "4400430247434142"
PRICE = 500

# Flask –¥–ª—è UptimeRobot
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

Thread(target=run_flask).start()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
conn = sqlite3.connect('ads.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS ads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    title TEXT,
    description TEXT,
    phone TEXT,
    is_paid INTEGER DEFAULT 0
)''')
conn.commit()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üì¢ –í–∞–∫–∞–Ω—Å–∏–∏", "üè† –ê—Ä–µ–Ω–¥–∞")
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
    markup.row("üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.message_handler(func=lambda message: message.text == "üì¢ –í–∞–∫–∞–Ω—Å–∏–∏" or message.text == "üè† –ê—Ä–µ–Ω–¥–∞")
def show_category(message):
    category = "–í–∞–∫–∞–Ω—Å–∏–∏" if message.text == "üì¢ –í–∞–∫–∞–Ω—Å–∏–∏" else "–ê—Ä–µ–Ω–¥–∞"
    cursor.execute("SELECT id, title, description, phone FROM ads WHERE category=? ORDER BY id DESC", (category,))
    ads = cursor.fetchall()
    if ads:
        for ad in ads:
            bot.send_message(message.chat.id, f"üÜî {ad[0]}\nüìå {ad[1]}\nüìù {ad[2]}\nüìû {ad[3]}")
    else:
        bot.send_message(message.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")

# –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def add_ad(message):
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –í–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –ê—Ä–µ–Ω–¥–∞")
    bot.register_next_step_handler(msg, get_category)

def get_category(message):
    category = message.text
    if category not in ["–í–∞–∫–∞–Ω—Å–∏–∏", "–ê—Ä–µ–Ω–¥–∞"]:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
    bot.register_next_step_handler(msg, get_title, category)

def get_title(message, category):
    title = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    bot.register_next_step_handler(msg, get_description, category, title)

def get_description(message, category, title):
    description = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(msg, save_ad, category, title, description)

def save_ad(message, category, title, description):
    phone = message.text
    cursor.execute("INSERT INTO ads (user_id, category, title, description, phone) VALUES (?, ?, ?, ?, ?)",
                   (message.from_user.id, category, title, description, phone))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_menu())

# –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
def my_ads(message):
    cursor.execute("SELECT id, category, title FROM ads WHERE user_id=?", (message.from_user.id,))
    ads = cursor.fetchall()
    if ads:
        text = ""
        for ad in ads:
            text += f"üÜî {ad[0]} | üìÇ {ad[1]} | {ad[2]}\n"
        bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

# –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text == "üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def paid_ad(message):
    msg = ("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ‚Äî {} —Ç–≥.\n\n"
           "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ Kaspi:\n{}\n\n"
           "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç, –∏ –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ.").format(PRICE, KASPI_CARD)
    bot.send_message(message.chat.id, msg)

# –ü–æ–º–æ—â—å
@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def help_msg(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_support_username")

# –ö–æ–º–∞–Ω–¥–∞ /admin ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT * FROM ads ORDER BY id DESC")
    ads = cursor.fetchall()
    if not ads:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return
    for ad in ads:
        bot.send_message(message.chat.id,
                         f"üÜî {ad[0]}\nüë§ User ID: {ad[1]}\nüìÇ {ad[2]}\nüìå {ad[3]}\nüìù {ad[4]}\nüìû {ad[5]}\nüí∞ –ü–ª–∞—Ç–Ω–æ–µ: {'–î–∞' if ad[6] else '–ù–µ—Ç'}")

# –ö–æ–º–∞–Ω–¥–∞ /delete <id> ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@bot.message_handler(commands=['delete'])
def delete_ad(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        ad_id = int(message.text.split()[1])
        cursor.execute("SELECT * FROM ads WHERE id=?", (ad_id,))
        ad = cursor.fetchone()
        if ad:
            cursor.execute("DELETE FROM ads WHERE id=?", (ad_id,))
            conn.commit()
            bot.send_message(message.chat.id, f"üóë –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {ad_id} —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.send_message(message.chat.id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /delete <id>")

# –ó–∞–ø—É—Å–∫
bot.polling(none_stop=True)