# main.py

import telebot
from telebot import types
import sqlite3
import os
from flask import Flask
from threading import Thread

TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

ADMIN_ID = 6864791335  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
CHANNEL_ID = "@kyzylorda_helper_channel"
KASPI_CARD = "4400430247434142"
PRICE = 500

user_language = {}
user_data = {}

def init_db():
    conn = sqlite3.connect('ads.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ads (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            category TEXT,
            title TEXT,
            description TEXT,
            phone TEXT,
            is_paid INTEGER DEFAULT 0,
            is_posted INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

init_db()

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"), types.KeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞"))
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kyzylorda Helper!\n\n–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∞üáø “ö–∞–∑–∞“õ—à–∞"])
def set_language(message):
    lang = 'ru' if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π" else 'kz'
    user_language[message.chat.id] = lang
    send_main_menu(message.chat.id)

def send_main_menu(chat_id):
    lang = user_language.get(chat_id, 'ru')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏–∏" if lang == 'ru' else "üì¢ –ñ“±–º—ã—Å", 
               "üè† –ê—Ä–µ–Ω–¥–∞" if lang == 'ru' else "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É")
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" if lang == 'ru' else "‚ûï –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É", 
               "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" if lang == 'ru' else "üìã –ú–µ–Ω—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã–º")
    markup.add("üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" if lang == 'ru' else "üí∞ –ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É", 
               "‚ÑπÔ∏è –ü–æ–º–æ—â—å" if lang == 'ru' else "‚ÑπÔ∏è –ö”©–º–µ–∫")
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if lang == 'ru' else "–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä"
    bot.send_message(chat_id, text, reply_markup=markup)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id == ADMIN_ID:
        conn = sqlite3.connect('ads.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, category, title, is_posted FROM ads")
        ads = cursor.fetchall()
        conn.close()
        if not ads:
            bot.send_message(message.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")
            return
        for ad in ads:
            status = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ" if ad[3] else "‚ùå –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
            bot.send_message(message.chat.id, f"ID: {ad[0]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ad[1]}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {ad[2]}\n–°—Ç–∞—Ç—É—Å: {status}")
    else:
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")

@bot.message_handler(commands=['post'])
def post_ad(message):
    if message.from_user.id == ADMIN_ID:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
        bot.register_next_step_handler(msg, handle_post_id)

def handle_post_id(message):
    ad_id = message.text.strip()
    conn = sqlite3.connect('ads.db')
    cursor = conn.cursor()
    cursor.execute("SELECT title, description, phone FROM ads WHERE id=? AND is_posted=0", (ad_id,))
    ad = cursor.fetchone()
    if ad:
        post_text = f"üì¢ {ad[0]}\n\n{ad[1]}\n\nüìû {ad[2]}"
        bot.send_message(CHANNEL_ID, post_text)
        cursor.execute("UPDATE ads SET is_posted=1 WHERE id=?", (ad_id,))
        conn.commit()
        bot.send_message(message.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    conn.close()

@bot.message_handler(func=lambda m: m.text in ["üì¢ –í–∞–∫–∞–Ω—Å–∏–∏", "üì¢ –ñ“±–º—ã—Å", "üè† –ê—Ä–µ–Ω–¥–∞", "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É"])
def show_ads(message):
    lang = user_language.get(message.chat.id, 'ru')
    category_map = {
        "üì¢ –í–∞–∫–∞–Ω—Å–∏–∏": "–í–∞–∫–∞–Ω—Å–∏–∏", "üì¢ –ñ“±–º—ã—Å": "–í–∞–∫–∞–Ω—Å–∏–∏",
        "üè† –ê—Ä–µ–Ω–¥–∞": "–ê—Ä–µ–Ω–¥–∞", "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É": "–ê—Ä–µ–Ω–¥–∞"
    }
    category = category_map.get(message.text)
    conn = sqlite3.connect('ads.db')
    cursor = conn.cursor()
    cursor.execute("SELECT title, description, phone FROM ads WHERE category=? AND is_posted=1", (category,))
    results = cursor.fetchall()
    conn.close()
    if not results:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏." if lang == 'ru' else "–ë“±–ª —Å–∞–Ω–∞—Ç—Ç–∞ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä –∂–æ“õ."
        bot.send_message(message.chat.id, text)
    else:
        for ad in results:
            bot.send_message(message.chat.id, f"üì¢ {ad[0]}\n\n{ad[1]}\n\nüìû {ad[2]}")

@bot.message_handler(func=lambda m: m.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "‚ûï –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É"])
def add_ad(message):
    lang = user_language.get(message.chat.id, 'ru')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏–∏" if lang == 'ru' else "üì¢ –ñ“±–º—ã—Å", 
               "üè† –ê—Ä–µ–Ω–¥–∞" if lang == 'ru' else "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É")
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è:" if lang == 'ru' else "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É —Å–∞–Ω–∞—Ç—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:"
    msg = bot.send_message(message.chat.id, text, reply_markup=markup)
    bot.register_next_step_handler(msg, get_category)

def get_category(message):
    user_data[message.chat.id] = {'category': message.text}
    lang = user_language.get(message.chat.id, 'ru')
    text = ("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫\n–û–ø–∏—Å–∞–Ω–∏–µ\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω" 
            if lang == 'ru' else 
            "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–¥—ã –∫–µ–ª–µ—Å—ñ —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –∂–∞–∑—ã“£—ã–∑:\n–¢–∞“õ—ã—Ä—ã–ø\n–°–∏–ø–∞—Ç—Ç–∞–º–∞\n–ë–∞–π–ª–∞–Ω—ã—Å –Ω”©–º—ñ—Ä—ñ")
    msg = bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(msg, get_ad_details)

def get_ad_details(message):
    parts = message.text.split("\n")
    if len(parts) < 3:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç –¥“±—Ä—ã—Å –µ–º–µ—Å. “Æ—à–µ—É—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑: —Ç–∞“õ—ã—Ä—ã–ø, —Å–∏–ø–∞—Ç—Ç–∞–º–∞, —Ç–µ–ª–µ—Ñ–æ–Ω.")
        return
    user_data[message.chat.id].update({
        'title': parts[0],
        'description': parts[1],
        'phone': parts[2]
    })

    data = user_data[message.chat.id]
    conn = sqlite3.connect('ads.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO ads (user_id, category, title, description, phone) VALUES (?, ?, ?, ?, ?)",
                   (message.chat.id, data['category'], data['title'], data['description'], data['phone']))
    conn.commit()
    conn.close()

    lang = user_language.get(message.chat.id, 'ru')
    bot.send_message(ADMIN_ID, f"üÜï –ñ–∞“£–∞ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É @{message.from_user.username or message.from_user.id}\n"
                               f"–°–∞–Ω–∞—Ç: {data['category']}\n–¢–∞“õ—ã—Ä—ã–ø: {data['title']}")
    text = "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é." if lang == 'ru' else "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É –º–æ–¥–µ—Ä–∞—Ü–∏—è“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ."
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text in ["üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "üìã –ú–µ–Ω—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã–º"])
def my_ads(message):
    lang = user_language.get(message.chat.id, 'ru')
    conn = sqlite3.connect('ads.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, title, is_posted FROM ads WHERE user_id=?", (message.chat.id,))
    ads = cursor.fetchall()
    conn.close()
    if not ads:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π." if lang == 'ru' else "–°—ñ–∑–¥–µ ”ô–ª—ñ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É –∂–æ“õ."
        bot.send_message(message.chat.id, text)
    else:
        for ad in ads:
            status = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ" if ad[2] else "üïì –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
            bot.send_message(message.chat.id, f"ID: {ad[0]}\n{ad[1]}\n–°—Ç–∞—Ç—É—Å: {status}")

@bot.message_handler(func=lambda m: m.text in ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚ÑπÔ∏è –ö”©–º–µ–∫"])
def help_section(message):
    lang = user_language.get(message.chat.id, 'ru')
    if lang == 'ru':
        text = f"–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n‚ûï –ù–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ¬ª\n\n" \
               f"–î–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\nüí∞ –û–ø–ª–∞—Ç–∏—Ç–µ {PRICE}‚Ç∏ –Ω–∞ Kaspi: {KASPI_CARD} –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω—É."
    else:
        text = f"–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É “Ø—à—ñ–Ω:\n‚ûï ¬´–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É¬ª –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑\n\n" \
               f"–ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “Ø—à—ñ–Ω:\nüí∞ {PRICE}‚Ç∏ Kaspi –Ω”©–º—ñ—Ä—ñ–Ω–µ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑: {KASPI_CARD} –∂”ô–Ω–µ —Ç“Ø–±—ñ—Ä—Ç–µ–∫—Ç—ñ –∞–¥–º–∏–Ω–µ –∂–æ–ª–¥–∞“£—ã–∑."
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª“ì–∞ ”©—Ç—É" if lang == 'kz' else "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", 
                                          url=f"https://t.me/{CHANNEL_ID[1:]}"))
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üí∞ –ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É"])
def paid_ad(message):
    lang = user_language.get(message.chat.id, 'ru')
    if lang == 'ru':
        text = f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {PRICE}‚Ç∏\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ Kaspi: {KASPI_CARD}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω—É."
    else:
        text = f"üí∞ –ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É –±–∞“ì–∞—Å—ã: {PRICE}‚Ç∏\nKaspi: {KASPI_CARD}\n–¢”©–ª–µ–º –∂–∞—Å–∞“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω —Ç“Ø–±—ñ—Ä—Ç–µ–∫—Ç—ñ –∞–¥–º–∏–Ω–µ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑."
    bot.send_message(message.chat.id, text)

# Flask –¥–ª—è UptimeRobot
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running!"

def run():
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

keep_alive()

bot.polling(none_stop=True)