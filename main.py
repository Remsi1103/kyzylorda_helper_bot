# main.py

import telebot
from telebot import types
import sqlite3
import os
from flask import Flask
from threading import Thread

TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_ID = 6864791335 
CHANNEL_ID = "@kyzylorda_helper_channel"
KASPI_CARD = "4400430247434142"
PRICE = 500  # —Ü–µ–Ω–∞ –∑–∞ –ø–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

# Flask –¥–ª—è UptimeRobot
app = Flask(__name__)
@app.route('/')
def home():
    return "Bot is running!"
def run_flask():
    app.run(host="0.0.0.0", port=8080)
Thread(target=run_flask).start()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
conn = sqlite3.connect('ads.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS ads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    category TEXT,
    title TEXT,
    description TEXT,
    phone TEXT,
    is_paid INTEGER DEFAULT 0
)''')
conn.commit()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}
user_data = {}

# –°—Ç–∞—Ä—Ç –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞", callback_data='lang_kz'))
    markup.add(types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='lang_ru'))
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kyzylorda Helper!\n–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def handle_lang(call):
    lang = call.data.split('_')[1]
    user_states[call.from_user.id] = {'lang': lang}
    send_main_menu(call.message.chat.id, lang)

def send_main_menu(chat_id, lang):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == 'kz':
        markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏—è–ª–∞—Ä", "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É")
        markup.add("‚ûï –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É", "üìã –ú–µ–Ω—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã–º")
        markup.add("‚ÑπÔ∏è –ö”©–º–µ–∫", "üí∞ –ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É")
    else:
        markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏–∏", "üè† –ê—Ä–µ–Ω–¥–∞")
        markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
        markup.add("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    bot.send_message(chat_id, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda msg: msg.text in [
    "üì¢ –í–∞–∫–∞–Ω—Å–∏–∏", "üè† –ê—Ä–µ–Ω–¥–∞", "üì¢ –í–∞–∫–∞–Ω—Å–∏—è–ª–∞—Ä", "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É"
])
def show_category_ads(message):
    lang = user_states.get(message.from_user.id, {}).get('lang', 'ru')
    category = 'vacancy' if "–í–∞–∫–∞–Ω—Å" in message.text or "–í–∞–∫–∞–Ω—Å–∏—è" in message.text else 'rent'
    cursor.execute("SELECT id, title, description, phone FROM ads WHERE category = ?", (category,))
    ads = cursor.fetchall()
    if not ads:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π." if lang == 'ru' else "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä –∂–æ“õ."
        bot.send_message(message.chat.id, text)
    else:
        for ad in ads:
            text = f"üÜî {ad[0]}\nüìå {ad[1]}\nüìù {ad[2]}\nüìû {ad[3]}"
            bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda msg: msg.text in [
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "‚ûï –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É"
])
def add_ad(message):
    user_states[message.from_user.id]['step'] = 'choose_category'
    lang = user_states[message.from_user.id]['lang']
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == 'kz':
        markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏—è", "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É")
    else:
        markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏—è", "üè† –ê—Ä–µ–Ω–¥–∞")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in ["üì¢ –í–∞–∫–∞–Ω—Å–∏—è", "üè† –ê—Ä–µ–Ω–¥–∞", "üì¢ –í–∞–∫–∞–Ω—Å–∏—è", "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É"])
def choose_category(message):
    user_data[message.from_user.id] = {'category': 'vacancy' if "–í–∞–∫–∞–Ω—Å–∏—è" in message.text else 'rent'}
    user_states[message.from_user.id]['step'] = 'enter_details'
    bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ü—Ä–∏–º–µ—Ä:\n\n–ü—Ä–æ–¥–∞–≤–µ—Ü –≤ –º–∞–≥–∞–∑–∏–Ω\n–û–ø—ã—Ç –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ì—Ä–∞—Ñ–∏–∫ 2/2\n87071234567")

@bot.message_handler(func=lambda msg: user_states.get(msg.from_user.id, {}).get('step') == 'enter_details')
def save_ad(message):
    parts = message.text.split('\n')
    if len(parts) < 3:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω *—Ç—Ä–µ–º—è —Å—Ç—Ä–æ–∫–∞–º–∏*.")
        return
    title, description, phone = parts[0], parts[1], parts[2]
    data = user_data[message.from_user.id]
    cursor.execute("INSERT INTO ads (user_id, username, category, title, description, phone) VALUES (?, ?, ?, ?, ?, ?)", (
        message.from_user.id, message.from_user.username, data['category'], title, description, phone
    ))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –ø–ª–∞—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ? –ù–∞–∂–º–∏—Ç–µ 'üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'.")

@bot.message_handler(func=lambda msg: msg.text in ["üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "üìã –ú–µ–Ω—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã–º"])
def my_ads(message):
    cursor.execute("SELECT id, title FROM ads WHERE user_id = ?", (message.from_user.id,))
    ads = cursor.fetchall()
    if not ads:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    else:
        for ad in ads:
            bot.send_message(message.chat.id, f"üÜî {ad[0]} - {ad[1]}")

@bot.message_handler(func=lambda msg: msg.text in ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚ÑπÔ∏è –ö”©–º–µ–∫"])
def help_msg(message):
    text = "–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ *{} —Ç–≥* –Ω–∞ Kaspi:\n`{}`\n2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã —Å—é–¥–∞.\n\n–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.".format(PRICE, KASPI_CARD)
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text in ["üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üí∞ –ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É"])
def pay_ad(message):
    help_msg(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω–∞ –æ–ø–ª–∞—Ç—ã
@bot.message_handler(content_types=['photo'])
def handle_payment_photo(message):
    if message.caption and "–æ–ø–ª–∞—Ç–∞" in message.caption.lower():
        bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
        bot.send_message(message.chat.id, "‚úÖ –°–∫—Ä—ñ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω –æ–ø—É–±–ª–∏–∫—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")
    else:
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã *—Å –ø–æ–¥–ø–∏—Å—å—é* ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: `–æ–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ`", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT id, title, description, phone FROM ads")
    ads = cursor.fetchall()
    if not ads:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    else:
        for ad in ads:
            text = f"üÜî {ad[0]}\nüìå {ad[1]}\nüìù {ad[2]}\nüìû {ad[3]}"
            bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['delete'])
def delete_ad(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        ad_id = int(message.text.split()[1])
        cursor.execute("DELETE FROM ads WHERE id = ?", (ad_id,))
        conn.commit()
        bot.send_message(message.chat.id, f"üóëÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_id} —É–¥–∞–ª–µ–Ω–æ.")
    except:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /delete ID")

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª (–ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
@bot.message_handler(commands=['post'])
def post_ad(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        ad_id = int(message.text.split()[1])
        cursor.execute("SELECT title, description, phone FROM ads WHERE id = ?", (ad_id,))
        ad = cursor.fetchone()
        if ad:
            text = f"üìå {ad[0]}\nüìù {ad[1]}\nüìû {ad[2]}"
            bot.send_message(CHANNEL_ID, text)
            bot.send_message(message.chat.id, "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.")
        else:
            bot.send_message(message.chat.id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /post ID")

bot.polling(none_stop=True)