# main.py
import telebot
from telebot import types
import sqlite3
import os
from flask import Flask
from threading import Thread

TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

# –ê–¥–º–∏–Ω ID –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
ADMIN_ID = 6864791335  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
CHANNEL_ID = "@kyzylorda_helper_channel"
KASPI_CARD = "4400430247434142"
PRICE = 500

# Flask –¥–ª—è UptimeRobot
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    t = Thread(target=run_flask)
    t.start()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect('ads.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS ads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    text TEXT,
    is_paid INTEGER DEFAULT 0
)
''')
conn.commit()

user_lang = {}
pending_paid_ads = {}

def main_menu(lang, user_id=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == "kz":
        markup.row("üì¢ –ñ“±–º—ã—Å", "üè† –ñ–∞–ª–¥–∞—É")
        markup.row("‚ûï –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É", "üìã –ú–µ–Ω—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã–º")
        markup.row("‚ÑπÔ∏è –ö”©–º–µ–∫", "üí∞ –ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É")
        if user_id == ADMIN_ID:
            markup.row("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    else:
        markup.row("üì¢ –í–∞–∫–∞–Ω—Å–∏–∏", "üè† –ê—Ä–µ–Ω–¥–∞")
        markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
        markup.row("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        if user_id == ADMIN_ID:
            markup.row("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"))
    markup.add(types.InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz"))
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kyzylorda Helper!\n–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def choose_language(call):
    lang = call.data.split("_")[1]
    user_lang[call.from_user.id] = lang
    text = "‚úÖ “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ —Ç–∞“£–¥–∞–ª–¥—ã." if lang == "kz" else "‚úÖ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω."
    bot.send_message(call.message.chat.id, text, reply_markup=main_menu(lang, call.from_user.id))

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    if message.chat.id == ADMIN_ID and message.reply_to_message:
        ad_text = message.reply_to_message.text
        bot.send_message(CHANNEL_ID, "üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n\n" + ad_text)
    else:
        bot.send_message(ADMIN_ID, f"üñº –°–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –æ—Ç @{message.from_user.username or message.from_user.id}")
        bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    lang = user_lang.get(message.from_user.id, "ru")
    text = message.text

    if lang == "kz":
        if text == "üì¢ –ñ“±–º—ã—Å":
            bot.send_message(message.chat.id, "–ú“±–Ω–¥–∞ –∂“±–º—ã—Å—Ç–∞—Ä –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ.")
        elif text == "üè† –ñ–∞–ª–¥–∞—É":
            bot.send_message(message.chat.id, "–ú“±–Ω–¥–∞ –∂–∞–ª“ì–∞ –∞–ª—É “±—Å—ã–Ω—ã—Å—Ç–∞—Ä—ã –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ.")
        elif text == "‚ûï –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É":
            bot.send_message(message.chat.id, "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É –º”ô—Ç—ñ–Ω—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:")
            bot.register_next_step_handler(message, lambda msg: save_ad(msg, "kz", is_paid=False))
        elif text == "üí∞ –ê“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É":
            bot.send_message(message.chat.id, f"üí≥ –ê“õ—ã–ª—ã –∂–∞—Ä–Ω–∞–º–∞ “Ø—à—ñ–Ω {PRICE}‚Ç∏ —Ç”©–ª–µ“£—ñ–∑:\nKaspi: {KASPI_CARD}\n\nüì∏ –¢”©–ª–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.")
            bot.send_message(message.chat.id, "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É –º”ô—Ç—ñ–Ω—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:")
            bot.register_next_step_handler(message, lambda msg: save_ad(msg, "kz", is_paid=True))
        elif text == "üìã –ú–µ–Ω—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã–º":
            show_user_ads(message, lang)
        elif text == "‚ÑπÔ∏è –ö”©–º–µ–∫":
            bot.send_message(message.chat.id, "–ë“±–ª –±–æ—Ç –∞—Ä“õ—ã–ª—ã —Å—ñ–∑ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä “õ–æ—Å—ã–ø, –∫”©—Ä—É—ñ“£—ñ–∑–≥–µ –±–æ–ª–∞–¥—ã.")
        elif text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and message.from_user.id == ADMIN_ID:
            admin_panel(message)
        else:
            bot.send_message(message.chat.id, "–¢“Ø—Å—ñ–Ω–±–µ–¥—ñ–º. –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–¥–µ–Ω —Ç–∞“£–¥–∞“£—ã–∑.", reply_markup=main_menu(lang, message.from_user.id))
    else:
        if text == "üì¢ –í–∞–∫–∞–Ω—Å–∏–∏":
            bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞–∫–∞–Ω—Å–∏–∏.")
        elif text == "üè† –ê—Ä–µ–Ω–¥–∞":
            bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∞—Ä–µ–Ω–¥–µ.")
        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, lambda msg: save_ad(msg, "ru", is_paid=False))
        elif text == "üí∞ –ü–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
            bot.send_message(message.chat.id, f"üí≥ –î–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {PRICE}‚Ç∏ –Ω–∞ Kaspi:\n{KASPI_CARD}\n\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã —Å—é–¥–∞.")
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, lambda msg: save_ad(msg, "ru", is_paid=True))
        elif text == "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è":
            show_user_ads(message, lang)
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            bot.send_message(message.chat.id, "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        elif text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and message.from_user.id == ADMIN_ID:
            admin_panel(message)
        else:
            bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu(lang, message.from_user.id))

def save_ad(message, lang, is_paid):
    user_id = message.from_user.id
    text = message.text
    cursor.execute("INSERT INTO ads (user_id, text, category, is_paid) VALUES (?, ?, ?, ?)", (user_id, text, "", int(is_paid)))
    conn.commit()

    if is_paid:
        bot.send_message(user_id, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –≤ —ç—Ç–æ—Ç —á–∞—Ç.")
        bot.send_message(ADMIN_ID, f"üîî –ù–æ–≤–æ–µ –ø–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or user_id}:\n\n{text}")
    else:
        bot.send_message(CHANNEL_ID, text)
        msg = "‚úÖ –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É —Å–∞“õ—Ç–∞–ª–¥—ã." if lang == "kz" else "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ."
        bot.send_message(user_id, msg, reply_markup=main_menu(lang, user_id))

def show_user_ads(message, lang):
    cursor.execute("SELECT id, text FROM ads WHERE user_id = ?", (message.from_user.id,))
    ads = cursor.fetchall()
    if not ads:
        msg = "–°—ñ–∑–¥–µ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä –∂–æ“õ." if lang == "kz" else "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
    else:
        msg = "\n\n".join([f"üÜî {ad[0]}:\n{ad[1]}" for ad in ads])
    bot.send_message(message.chat.id, msg)

# üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìã –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="admin_all_ads"))
    markup.add(types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="admin_delete"))
    markup.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh"))
    bot.send_message(message.chat.id, "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_panel(call):
    if call.from_user.id != ADMIN_ID:
        return

    if call.data == "admin_all_ads":
        cursor.execute("SELECT id, user_id, text, is_paid FROM ads")
        ads = cursor.fetchall()
        if not ads:
            bot.send_message(call.message.chat.id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")
        else:
            for ad in ads:
                paid = "üí∞" if ad[3] else ""
                msg = f"üÜî {ad[0]} | üë§ {ad[1]} {paid}\n{ad[2]}"
                bot.send_message(call.message.chat.id, msg[:4096])

    elif call.data == "admin_delete":
        bot.send_message(call.message.chat.id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É: `/delete ID`", parse_mode="Markdown")

    elif call.data == "admin_refresh":
        admin_panel(call.message)

@bot.message_handler(commands=['delete'])
def delete_ad(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        ad_id = int(message.text.split()[1])
        cursor.execute("DELETE FROM ads WHERE id = ?", (ad_id,))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_id} —É–¥–∞–ª–µ–Ω–æ.")
    except:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete [ID]")

# üü¢ –ó–∞–ø—É—Å–∫
keep_alive()
bot.polling(non_stop=True)