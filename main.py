# main.py

import telebot
from telebot import types
import sqlite3
import os
from flask import Flask
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

ADMIN_ID = 6864791335  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
CHANNEL_ID = "@kyzylorda_helper_channel"
KASPI_CARD = "4400430247434142"
PRICE = 500

conn = sqlite3.connect("ads.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS ads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    title TEXT,
    description TEXT,
    phone TEXT,
    is_paid INTEGER DEFAULT 0
)""")
conn.commit()

user_data = {}
user_states = {}

# Flask –¥–ª—è UptimeRobot
app = Flask(__name__)
@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
def run():
    app.run(host="0.0.0.0", port=8080)
Thread(target=run).start()

# üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(commands=["start"])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∞üáø “ö–∞–∑–∞“õ—à–∞")
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kyzylorda Helper!\n–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
@bot.message_handler(func=lambda msg: msg.text in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∞üáø “ö–∞–∑–∞“õ—à–∞"])
def language_choice(message):
    lang = "ru" if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π" else "kz"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == "ru":
        markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏—è", "üè† –ê—Ä–µ–Ω–¥–∞")
        markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add("üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    else:
        markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏—è–ª–∞—Ä", "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É")
        markup.add("‚ûï –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É")
        markup.add("üìã –ú–µ–Ω—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã–º", "‚ÑπÔ∏è –ö”©–º–µ–∫")
    bot.send_message(message.chat.id, "–ú–µ–Ω—é:", reply_markup=markup)

# üÜò –ü–æ–º–æ—â—å —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
@bot.message_handler(func=lambda msg: msg.text in ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚ÑπÔ∏è –ö”©–º–µ–∫"])
def help_message(message):
    text = (
        "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∞—Ä–µ–Ω–¥–µ –∏ –≤–∞–∫–∞–Ω—Å–∏—è–º.\n\n"
        "‚ûï –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'.\n"
        "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π ‚Äî 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'.\n\n"
        "üì¢ –ê —Ç–∞–∫–∂–µ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –≥–¥–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ª—É—á—à–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì≤ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/kyzylorda_helper_channel"))
    bot.send_message(message.chat.id, text, reply_markup=markup)

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda msg: msg.text in ["üì¢ –í–∞–∫–∞–Ω—Å–∏—è", "üè† –ê—Ä–µ–Ω–¥–∞", "üì¢ –í–∞–∫–∞–Ω—Å–∏—è–ª–∞—Ä", "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É"])
def choose_category(message):
    if "–í–∞–∫–∞–Ω—Å" in message.text:
        category = "vacancy"
    elif "–ê—Ä–µ–Ω–¥–∞" in message.text or "–ñ–∞–ª“ì–∞" in message.text:
        category = "rent"
    else:
        category = "other"
    user_data[message.from_user.id] = {'category': category}
    user_states[message.from_user.id] = {'step': 'enter_details'}
    bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ü—Ä–∏–º–µ—Ä:\n\n–ü—Ä–æ–¥–∞–≤–µ—Ü –≤ –º–∞–≥–∞–∑–∏–Ω\n–û–ø—ã—Ç –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ì—Ä–∞—Ñ–∏–∫ 2/2\n87071234567")

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda msg: msg.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "‚ûï –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É “õ–æ—Å—É"])
def add_ad(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏—è", "üè† –ê—Ä–µ–Ω–¥–∞")
    markup.add("üì¢ –í–∞–∫–∞–Ω—Å–∏—è–ª–∞—Ä", "üè† –ñ–∞–ª“ì–∞ –±–µ—Ä—É")
    bot.send_message(message.chat.id, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda msg: user_states.get(msg.from_user.id, {}).get('step') == 'enter_details')
def receive_details(message):
    category = user_data.get(message.from_user.id, {}).get("category")
    lines = message.text.split("\n")
    if len(lines) < 3:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.")
        return
    title, description, phone = lines[0], "\n".join(lines[1:-1]), lines[-1]
    cursor.execute("INSERT INTO ads (user_id, category, title, description, phone) VALUES (?, ?, ?, ?, ?)", (message.from_user.id, category, title, description, phone))
    conn.commit()
    ad_id = cursor.lastrowid

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–º", callback_data=f"pay_{ad_id}"))
    bot.send_message(message.chat.id, f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID {ad_id}.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø–ª–∞—Ç–Ω—ã–º –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ.", reply_markup=markup)
    user_states.pop(message.from_user.id, None)

# üí∞ –ö–Ω–æ–ø–∫–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_"))
def pay_ad(call):
    ad_id = call.data.split("_")[1]
    bot.send_message(call.message.chat.id, f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {PRICE}‚Ç∏ –Ω–∞ Kaspi –Ω–æ–º–µ—Ä: {KASPI_CARD}.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω—É.")
    bot.answer_callback_query(call.id, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# üë§ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda msg: msg.text in ["üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "üìã –ú–µ–Ω—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã–º"])
def my_ads(message):
    cursor.execute("SELECT id, title FROM ads WHERE user_id = ?", (message.from_user.id,))
    ads = cursor.fetchall()
    if ads:
        text = "\n".join([f"üÜî {ad[0]} ‚Äî {ad[1]}" for ad in ads])
        bot.send_message(message.chat.id, f"üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n{text}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

# üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞ (–≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏)
@bot.message_handler(func=lambda msg: msg.text == "üìã –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" and msg.from_user.id == ADMIN_ID)
def list_all_ads(message):
    cursor.execute("SELECT id, title, description, phone FROM ads")
    ads = cursor.fetchall()
    if not ads:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    else:
        for ad in ads:
            ad_id = ad[0]
            text = f"üÜî {ad_id}\nüìå {ad[1]}\nüìù {ad[2]}\nüìû {ad[3]}"
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"action_delete_{ad_id}"),
                types.InlineKeyboardButton("üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"action_post_{ad_id}")
            )
            bot.send_message(message.chat.id, text, reply_markup=markup)

# üîò –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith("action_"))
def handle_admin_action(call):
    if call.from_user.id != ADMIN_ID:
        return

    action, ad_id = call.data.split("_")[1:]
    ad_id = int(ad_id)

    if action == "delete":
        cursor.execute("DELETE FROM ads WHERE id = ?", (ad_id,))
        conn.commit()
        bot.answer_callback_query(call.id, f"–£–¥–∞–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_id}")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    elif action == "post":
        cursor.execute("SELECT title, description, phone FROM ads WHERE id = ?", (ad_id,))
        ad = cursor.fetchone()
        if ad:
            text = f"üìå {ad[0]}\nüìù {ad[1]}\nüìû {ad[2]}"
            bot.send_message(CHANNEL_ID, text)
            bot.answer_callback_query(call.id, "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
        else:
            bot.answer_callback_query(call.id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# ‚è≥ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.polling(none_stop=True)